#ifndef DPGAnalysis_RPC_RPCMaskDetId_icc
#define DPGAnalysis_RPC_RPCMaskDetId_icc

#include "DPGAnalysis/RPC/interface/RPCMaskDetId.h"

#include <cstdlib>
#include <ostream>

#include "FWCore/Utilities/interface/Exception.h"

#include "DataFormats/DetId/interface/DetId.h"
#include "DataFormats/MuonDetId/interface/MuonSubdetId.h"
#include "DPGAnalysis/RPC/interface/RPCIdType.h"

inline ::uint32_t RPCMaskDetId::getId() const
{
    return id_;
}

inline RPCMaskDetId::operator ::uint32_t() const
{
    return id_;
}

inline bool RPCMaskDetId::matches(RPCMaskDetId const & _in) const
{
    return ((id_ & _in.getMask()) == (getMask() & _in.id_));
}

inline void RPCMaskDetId::setId(::uint32_t const & _id)
{
    id_ = _id;
}

inline void RPCMaskDetId::reset()
{
    id_ &= (mask_dettype_ | mask_subdettype_ | mask_rpcidtype_);
}

// Field Getters
inline int RPCMaskDetId::getDetType() const
{
    return bf_get(min_dettype_, mask_dettype_, pos_dettype_);
}

inline int RPCMaskDetId::getSubDetType() const
{
    return bf_get(min_subdettype_, mask_subdettype_, pos_subdettype_);
}

inline int RPCMaskDetId::getRPCIdType() const
{
    return bf_get(min_rpcidtype_, mask_rpcidtype_, pos_rpcidtype_);
}

inline int RPCMaskDetId::getRegion() const
{
    return bf_get(min_region_, mask_region_, pos_region_);
}

inline int RPCMaskDetId::getStation() const
{
    return bf_get(min_station_, mask_station_, pos_station_);
}

inline int RPCMaskDetId::getLayer() const
{
    return bf_get(min_layer_, mask_layer_, pos_layer_);
}

inline int RPCMaskDetId::getRing() const
{
    return bf_get(min_ring_, mask_ring_, pos_ring_);
}

inline int RPCMaskDetId::getSector() const
{
    return bf_get(min_sector_, mask_sector_, pos_sector_);
}

inline int RPCMaskDetId::getSubSector() const
{
    return bf_get(min_subsector_, mask_subsector_, pos_subsector_);
}

inline int RPCMaskDetId::getSubSubSector() const
{
    return bf_get(min_subsubsector_, mask_subsubsector_, pos_subsubsector_);
}

inline int RPCMaskDetId::getRoll() const
{
    return bf_get(min_roll_, mask_roll_, pos_roll_);
}

inline int RPCMaskDetId::getGap() const
{
    return bf_get(min_gap_, mask_gap_, pos_gap_);
}

inline bool RPCMaskDetId::isBarrel() const
{
    return (getRegion() == 0);
}

inline bool RPCMaskDetId::isEndcap() const
{
    return (std::abs(getRegion()) == 1);
}

inline int RPCMaskDetId::getWheel() const
{
    if (!isEndcap())
        return getRing();
    return wildcard_;
}

inline int RPCMaskDetId::getDisk() const
{
    if (!isBarrel())
        return getStation();
    return wildcard_;
}

inline int RPCMaskDetId::getEndcapSector() const
{
    int _sector(getSector())
        , _subsector(getSubSector())
        , _subsubsector(getSubSubSector());
    if (isEndcap() && _sector != wildcard_ && _subsector != wildcard_) {
        if (getStation() != 1 && getRing() == 1)
            return (_sector - 1) * 3 + _subsector + 1;
        else if (_subsubsector != wildcard_)
            return (_sector - 1) * 6 + _subsector * 2 + _subsubsector + 1;
    }
    return wildcard_;
}

inline RPCMaskDetId RPCMaskDetId::getWheelId() const
{
    RPCMaskDetId _wheel(id_);
    _wheel.id_ &= (mask_dettype_ | mask_subdettype_ | mask_rpcidtype_
                   | mask_region_ | mask_ring_);
    return _wheel;
}

inline RPCMaskDetId RPCMaskDetId::getDiskId() const
{
    RPCMaskDetId _disk(id_);
    _disk.id_ &= (mask_dettype_ | mask_subdettype_ | mask_rpcidtype_
                  | mask_region_ | mask_station_);
    return _disk;
}

inline RPCMaskDetId RPCMaskDetId::getChamberId() const
{
    RPCMaskDetId _chamber(id_);
    _chamber.id_ &= ~(mask_roll_ | mask_gap_);
    return _chamber;
}

inline RPCMaskDetId RPCMaskDetId::getRollId() const
{
    RPCMaskDetId _roll(id_);
    _roll.id_ &= ~(mask_gap_);
    return _roll;
}

// Field Setters
inline RPCMaskDetId & RPCMaskDetId::setDetType()
{
    return bf_set(min_dettype_, max_dettype_, mask_dettype_, pos_dettype_, DetId::Muon);
}

inline RPCMaskDetId & RPCMaskDetId::setSubDetType()
{
    return bf_set(min_subdettype_, max_subdettype_, mask_subdettype_, pos_subdettype_, MuonSubdetId::RPC);
}

inline RPCMaskDetId & RPCMaskDetId::setRPCIdType()
{
    return bf_set(min_rpcidtype_, max_rpcidtype_, mask_rpcidtype_, pos_rpcidtype_, RPCIdType::RPCMaskDetId);
}

inline RPCMaskDetId & RPCMaskDetId::setRegion(int _region)
{
    return bf_set(min_region_, max_region_, mask_region_, pos_region_, _region);
}

inline RPCMaskDetId & RPCMaskDetId::setStation(int _station)
{
    return bf_set(min_station_, max_station_, mask_station_, pos_station_, _station);
}

inline RPCMaskDetId & RPCMaskDetId::setLayer(int _layer)
{
    return bf_set(min_layer_, max_layer_, mask_layer_, pos_layer_, _layer);
}

inline RPCMaskDetId & RPCMaskDetId::setRing(int _ring)
{
    return bf_set(min_ring_, max_ring_, mask_ring_, pos_ring_, _ring);
}

inline RPCMaskDetId & RPCMaskDetId::setSector(int _sector)
{
    return bf_set(min_sector_, max_sector_, mask_sector_, pos_sector_, _sector);
}

inline RPCMaskDetId & RPCMaskDetId::setSubSector(int _subsector)
{
    return bf_set(min_subsector_, max_subsector_, mask_subsector_, pos_subsector_, _subsector);
}

inline RPCMaskDetId & RPCMaskDetId::setSubSubSector(int _subsubsector)
{
    return bf_set(min_subsubsector_, max_subsubsector_, mask_subsubsector_, pos_subsubsector_, _subsubsector);
}

inline RPCMaskDetId & RPCMaskDetId::setRoll(int _roll)
{
    return bf_set(min_roll_, max_roll_, mask_roll_, pos_roll_, _roll);
}

inline RPCMaskDetId & RPCMaskDetId::setGap(int _gap)
{
    return bf_set(min_gap_, max_gap_, mask_gap_, pos_gap_, _gap);
}

inline RPCMaskDetId & RPCMaskDetId::setEndcapSector(int _endcap_sector)
{
    if (_endcap_sector == wildcard_) {
        setSector();
        setSubSector();
        setSubSubSector();
    } else {
        if (_endcap_sector > 36)
            throw cms::Exception("OutOfRange")
                << "Out-of-range endcap sector in RPCMaskDetId: " << _endcap_sector;
        if (getStation() != 1 && getRing() == 1) { // 1..18 to (1..6)*(0..2)
            setSector(((_endcap_sector - 1) / 3) + 1);
            setSubSector((_endcap_sector - 1) % 3);
            setSubSubSector(0);
        } else { // 1..36 to (1..6)*(0..2)*(0..1)
            setSector((_endcap_sector - 1) / 6 + 1);
            setSubSector(((_endcap_sector - 1) % 6) / 2);
            setSubSubSector((_endcap_sector - 1) % 2);
        }
    }
    return *this;
}

inline bool RPCMaskDetId::operator<(RPCMaskDetId const & _in) const
{
    return (id_ < _in.id_);
}

inline bool RPCMaskDetId::operator==(RPCMaskDetId const & _in) const
{
    return (id_ == _in.id_);
}

inline bool RPCMaskDetId::operator!=(RPCMaskDetId const & _in) const
{
    return (id_ != _in.id_);
}

inline bool RPCMaskDetId::operator<(::uint32_t const & _in) const
{
    return (id_ < _in);
}

inline bool RPCMaskDetId::operator==(::uint32_t const & _in) const
{
    return (id_ == _in);
}

inline bool RPCMaskDetId::operator!=(::uint32_t const & _in) const
{
    return (id_ != _in);
}

inline RPCMaskDetId & RPCMaskDetId::operator++()
{
    int _value(0);
    if ((_value = getRegion()) != wildcard_) {
        if (_value < max_region_)
            return setRegion(_value + 1);
        setRegion(min_region_);
    }
    if ((_value = getStation()) != wildcard_) {
        if (_value < max_station_)
            return setStation(_value + 1);
        setStation(min_station_);
    }
    if ((_value = getLayer()) != wildcard_) {
        if (_value < max_layer_)
            return setLayer(_value + 1);
        setLayer(min_layer_);
    }
    if ((_value = getRing()) != wildcard_) {
        if (_value < max_ring_)
            return setRing(_value + 1);
        setRing(min_ring_);
    }
    if ((_value = getSector()) != wildcard_) {
        if (_value < max_sector_)
            return setSector(_value + 1);
        setSector(min_sector_);
    }
    if ((_value = getSubSector()) != wildcard_) {
        if (_value < max_subsector_)
            return setSubSector(_value + 1);
        setSubSector(min_subsector_);
    }
    if ((_value = getSubSubSector()) != wildcard_) {
        if (_value < max_subsubsector_)
            return setSubSubSector(_value + 1);
        setSubSubSector(min_subsubsector_);
    }
    if ((_value = getRoll()) != wildcard_) {
        if (_value < max_roll_)
            return setRoll(_value + 1);
        setRoll(min_roll_);
    }
    if ((_value = getGap()) != wildcard_) {
        if (_value < max_gap_)
            return setGap(_value + 1);
        setGap(min_gap_);
    }
    return *this;
}

inline RPCMaskDetId RPCMaskDetId::operator++(int)
{
    RPCMaskDetId _return(*this);
    ++(*this);
    return _return;
}

inline RPCMaskDetId & RPCMaskDetId::operator--()
{
    int _value(0);
    if ((_value = getRegion()) != wildcard_) {
        if (_value > min_region_)
            return setRegion(_value - 1);
        setRegion(max_region_);
    }
    if ((_value = getStation()) != wildcard_) {
        if (_value > min_station_)
            return setStation(_value - 1);
        setStation(max_station_);
    }
    if ((_value = getLayer()) != wildcard_) {
        if (_value > min_layer_)
            return setLayer(_value - 1);
        setLayer(max_layer_);
    }
    if ((_value = getRing()) != wildcard_) {
        if (_value > min_ring_)
            return setRing(_value - 1);
        setRing(max_ring_);
    }
    if ((_value = getSector()) != wildcard_) {
        if (_value > min_sector_)
            return setSector(_value - 1);
        setSector(max_sector_);
    }
    if ((_value = getSubSector()) != wildcard_) {
        if (_value > min_subsector_)
            return setSubSector(_value - 1);
        setSubSector(max_subsector_);
    }
    if ((_value = getSubSubSector()) != wildcard_) {
        if (_value > min_subsubsector_)
            return setSubSubSector(_value - 1);
        setSubSubSector(max_subsubsector_);
    }
    if ((_value = getRoll()) != wildcard_) {
        if (_value > min_roll_)
            return setRoll(_value - 1);
        setRoll(max_roll_);
    }
    if ((_value = getGap()) != wildcard_) {
        if (_value > min_gap_)
            return setGap(_value - 1);
        setGap(max_gap_);
    }
    return *this;
}

inline RPCMaskDetId RPCMaskDetId::operator--(int)
{
    RPCMaskDetId _return(*this);
    --(*this);
    return _return;
}

inline int RPCMaskDetId::bf_get(int const _min, ::uint32_t const _mask, int const _pos) const
{
    ::uint32_t _value(id_ & _mask);
    if (_value == 0)
        return wildcard_;
    return _min + (int)(_value >> _pos) - 1;
}

inline RPCMaskDetId & RPCMaskDetId::bf_set(int const _min, int const _max, ::uint32_t const _mask, int const _pos, int const _value)
{
    if (_value >= _min && _value <= _max) {
        id_ &= ~_mask;
        id_ |= (((::uint32_t)(_value - _min + 1) << _pos) & _mask);
    } else if (_value == wildcard_)
        id_ &= ~_mask;
    else
        throw cms::Exception("OutOfRange")
            << "Out-of-range input for RPCMaskDetId::bf_set, position " << _pos << ": " << _value;
    return *this;
}

inline std::ostream & RPCMaskDetId::bf_stream(std::ostream & _ostream, int const _min, ::uint32_t const _mask, int const _pos) const
{
    ::uint32_t _value(id_ & _mask);
    if (_value == 0)
        return (_ostream << '*');
    return (_ostream << (_min + (int)(_value >> _pos) - 1));
}

#endif // DPGAnalysis_MuonDetId_RPCMaskDetId_icc
